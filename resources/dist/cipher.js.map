{"version":3,"file":"cipher.js","sources":["../js/Components/Component.mjs","../js/Script.mjs","../js/Util/base16.mjs","../js/Password.mjs","../js/Util/encode.mjs","../js/Util/sha256.mjs","../js/Cipher.mjs","../js/Components/Decrypt.mjs","../js/Event.mjs","../js/Components/FormControl.mjs","../js/Components/Fieldset.mjs","../js/Components/Encrypt.mjs","../js/Components/Login.mjs","../js/Components/Register.mjs","../js/Components.mjs","../js/index.js"],"sourcesContent":["/**\n * @abstract\n */\nexport default class Component {\n    /**\n     * @param {HTMLElement} node \n     * @param {Object} _context \n     */\n    constructor(node, _context) {\n        /**\n         * @property {HTMLElement} node\n         */\n        this.node = node\n    }\n}","export default class Script {\n    static #script = document.currentScript\n\n    static event = this.#script.getAttribute('event')\n\n    static salt = this.#script.getAttribute('salt')\n\n    static storage = this.#script.getAttribute('storage')\n}","/**\n * Class responsible for encoding and decoding base16 (hexadecimal).\n */\nexport default class base16 {\n    static encode(data) {\n        return Array\n            .from(new Uint8Array(data))\n            .map((b) => b.toString(16).padStart(2, '0'))\n            .join('')\n    }\n\n    static decode(string) {\n        return new Uint8Array(string.match(/../g).map(h => parseInt(h, 16))).buffer\n    }\n}","import Script from \"./Script.mjs\";\n\nimport base16 from \"./Util/base16.mjs\";\nimport encode from \"./Util/encode.mjs\";\nimport sha256 from \"./Util/sha256.mjs\";\n\nexport default class Password {\n    /** @type {Promise<ArrayBuffer>} - The private, client-side password hash. */\n    #hash\n\n    /** @type {Promise<ArrayBuffer> | null} - The 'shareable', server-side password hash. */\n    hash\n\n    static salt = Script.salt\n\n    static storage = Script.storage\n\n    static token = Script.token\n\n    /**\n     * @param {{ clientHash: ArrayBufferLike, serverHash: ArrayBufferLike }} param0 \n     */\n    constructor({ clientHash, serverHash = null }) {\n        this.#hash = clientHash\n\n        this.hash = serverHash\n    }\n\n    /**\n     * Initialize a password instance by hashing a plaintext password.\n     * \n     * @param {string} plaintext \n     * @returns {Password}\n     */\n    static hash(plaintext) {\n        const\n            salt = this.salt,\n            hash = input => sha256(encode(input)),\n            clientHash = hash(plaintext + salt),\n            serverHash = hash(salt + plaintext)\n\n        return new this({ clientHash, serverHash })\n    }\n\n    /**\n     * Recall a previously stored instance from local storage.\n     * \n     * @returns {Promise<Password>}\n     */\n    static async recall() {\n        const\n            stored = localStorage.getItem(this.storage),\n            clientHash = base16.decode(stored)\n\n        return new this({ clientHash })\n    }\n\n    /**\n     * Store the password hash in local storage, so it may be\n     * recalled in a subsequent request post-authentication.\n     * \n     * @returns {Promise<Password>}\n     */\n    async remember() {\n        localStorage.setItem(\n            Password.storage,\n            base16.encode(await this.#hash)\n        )\n\n        return this\n    }\n\n    /**\n     * Use the password to unwrap (decrypt) the given wrapped key using the given salt.\n     * \n     * @param {ArrayBufferLike} wrappedKey \n     * @param {ArrayBufferLike} salt \n     * @returns \n     */\n    async unwrap(wrappedKey, salt, unwrappedKeyAlgorithm = { name: 'RSA-OAEP', hash: 'SHA-256' }) {\n        const\n            unwrappingKey = await this.#wrappingKey(salt),\n            unwrappedKey = await crypto.subtle.unwrapKey(\n                'pkcs8',\n                wrappedKey,\n                unwrappingKey,\n                { name: 'AES-GCM', iv: salt },\n                unwrappedKeyAlgorithm,\n                true,\n                ['decrypt']\n            )\n\n        return unwrappedKey\n    }\n\n    /**\n     * Use the password to wrap (encrypt) the given key using the given salt.\n     * \n     * @param {CryptoKey} key \n     * @param {ArrayBufferLike} salt \n     */\n    async wrap(key, salt) {\n        const\n            wrappingKey = await this.#wrappingKey(salt),\n            wrappedKey = await crypto.subtle.wrapKey(\n                'pkcs8',\n                key,\n                wrappingKey,\n                { name: 'AES-GCM', iv: salt }\n            )\n\n        return wrappedKey\n    }\n\n    /**\n     * Get the wrapping key for the given salt.\n     * \n     * @param {ArrayBufferLike} salt \n     * @returns {Promise<CryptoKey>}\n     */\n    async #wrappingKey(salt) {\n        const baseKey = await crypto.subtle.importKey(\n            'raw',\n            await this.#hash,\n            'PBKDF2',\n            false,\n            ['deriveBits', 'deriveKey'],\n        )\n\n        return await crypto.subtle.deriveKey(\n            {\n                salt,\n                name: 'PBKDF2',\n                iterations: 100000,\n                hash: 'SHA-256',\n            },\n            baseKey,\n            { 'name': 'AES-GCM', 'length': 256 },\n            true,\n            ['encrypt', 'decrypt', 'wrapKey', 'unwrapKey'],\n        )\n    }\n}","export default function encode(value) {\n    return new TextEncoder().encode(value)\n}","export default function sha256(data) {\n    return crypto.subtle.digest(\n        'SHA-256',\n        data\n    )\n}","import Password from \"./Password.mjs\"\n\nimport base16 from \"./Util/base16.mjs\"\n\nexport default class Cipher {\n    /**\n     * @param {{ salt: ArrayBufferLike, privateKey: CryptoKey, publicKey: CryptoKey }}\n     */\n    constructor({ privateKey, publicKey, salt }) {\n        this.privateKey = privateKey\n\n        this.publicKey = publicKey\n\n        this.salt = salt\n    }\n\n    /**\n     * Encrypt sensitive data using the given password and export the cipher.\n     * \n     * @param {Password} [password]\n     * @returns {Promise<{ k: string, p: string, s: string }>}\n     */\n    async export(password = null) {\n        password ??= await Password.recall()\n\n        const\n            wrappedPrivateKey = password.wrap(this.privateKey, this.salt),\n            exportedPublicKey = crypto.subtle.exportKey(\n                'spki',\n                this.publicKey\n            )\n\n        return {\n            k: base16.encode(await wrappedPrivateKey),\n            p: base16.encode(await exportedPublicKey),\n            s: base16.encode(this.salt)\n        }\n    }\n\n    /**\n     * Generate a new cipher.\n     * \n     * @returns {Promise<Cipher>}\n     */\n    static async generate() {\n        const\n            [salt, keyPair] = await Promise.all([\n                crypto.getRandomValues(new Uint8Array(16)),\n                crypto.subtle.generateKey(\n                    {\n                        name: 'RSA-OAEP',\n                        modulusLength: 4096,\n                        publicExponent: new Uint8Array([1, 0, 1]),\n                        hash: 'SHA-256'\n                    },\n                    true,\n                    ['encrypt', 'decrypt', 'wrapKey', 'unwrapKey']\n                )\n            ]),\n            privateKey = keyPair.privateKey,\n            publicKey = keyPair.publicKey\n\n        return new this({ salt, privateKey, publicKey })\n    }\n\n    /**\n     * Parse and decrypt a previously exported cipher using the given password.\n     * \n     * @param {{ k: string, p: string, s: string }}\n     * @param {Password} [password]\n     * @returns {Promise<Cipher>}\n     */\n    static async import({ k, p, s }, password = null) {\n        password ??= await Password.recall()\n\n        const\n            salt = base16.decode(s),\n            exportedPublicKey = base16.decode(p),\n            wrappedPrivateKey = base16.decode(k)\n\n        const [privateKey, publicKey] = await Promise.all([\n            password.unwrap(wrappedPrivateKey, salt),\n            crypto.subtle.importKey(\n                'spki',\n                exportedPublicKey,\n                {\n                    name: 'RSA-OAEP',\n                    hash: 'SHA-256'\n                },\n                true,\n                ['encrypt', 'wrapKey']\n            )\n        ])\n\n        return new this({\n            privateKey,\n            publicKey,\n            salt,\n        })\n    }\n}","import Cipher from \"../Cipher.mjs\";\nimport Component from \"./Component.mjs\";\n\nexport default class Decrypt extends Component {\n    constructor(node, { cipher }) {\n        super(node)\n\n        this.decrypt(cipher)\n    }\n\n    async decrypt(data) {\n        // \n    }\n}","import Script from \"./Script.mjs\"\n\n/**\n * Class responsible for managing events.\n */\nexport default class Event {\n    /**\n     * The name of the event that will be dispatched at the end of\n     * an event interception cycle and, unless stopped, will bubble\n     * to the root and trigger the \"final\" callback.\n     */\n    static event = Script.event\n\n    /** \n     * The event targets and their respective callback stacks, grouped by event type.\n     * \n     * @type {Object<string, WeakMap<EventTarget, {callbacks: ((event: Event) => any)[], final?: (event: Event) => any}>>}\n     */\n    static targets = {}\n\n    /**\n     * Fluently begin constructing a new event interception definition.\n     * \n     * @param {string} event \n     * @returns \n     */\n    static intercept(event) {\n        return new class {\n            /**\n             * Set the event target.\n             * \n             * @param {EventTarget} target \n             * @returns {this}\n             */\n            on(target) {\n                const targets = Event.targets[event] ??= new WeakMap\n\n                if (!targets.has(target)) {\n                    targets.set(target, {\n                        callbacks: []\n                    })\n\n                    Event.#listen(event, target)\n                }\n\n                this.target = targets.get(target)\n\n                return this\n            }\n\n            /**\n             * Add a callback to be run while intercepting event.\n             * \n             * @param {(event: Event) => any} callback \n             * @returns \n             */\n            then(callback) {\n                this.target.callbacks.push(callback)\n\n                return this\n            }\n\n            /**\n             * Set the callback to be run at the end once.\n             * \n             * @param {(event: Event) => any} callback \n             */\n            finally(callback) {\n                this.target.final = callback\n            }\n        }\n    }\n\n    /**\n     * Add the event listener for the given event type and target.\n     * \n     * @param {string} type\n     * @param {EventTarget} target \n     */\n    static #listen(type, target) {\n        target.addEventListener(type, async event => {\n            event.preventDefault()\n\n            const\n                targets = this.targets[type],\n                listener = targets.get(target),\n                callbacks = listener.callbacks,\n                promises = callbacks.map(callback => callback())\n\n            await Promise.all(promises)\n\n            target.dispatchEvent(new CustomEvent(this.event, {\n                bubbles: true,\n                detail: { type }\n            }))\n        })\n\n        document.addEventListener(this.event, event => {\n            if (\n                event.target != target ||\n                event.detail.type != type\n            ) {\n                return\n            }\n\n            this.targets[type].get(target).final(event)\n        })\n    }\n}","import Component from \"./Component.mjs\";\nimport Event from \"../Event.mjs\";\n\n/**\n * @abstract\n */\nexport default class FormControl extends Component {\n    /** @type {HTMLFormElement} */\n    get form() {\n        return this.node.form\n    }\n\n    /**\n     * Intercept the submit event for the component's form using the given callback.\n     * \n     * @param {(event: Event) => any} callback \n     * @returns {void}\n     */\n    onSubmit(callback) {\n        if (!this.form) {\n            throw new Error(`Cipher component \"${this.constructor.name.toLowerCase()}\" must be inside <form> element to intercept submit.`)\n        }\n\n        Event.intercept('submit')\n            .on(this.form)\n            .then(callback.bind(this))\n            .finally(() => this.form.submit())\n    }\n}","import FormControl from \"./FormControl.mjs\";\n\n/**\n * @abstract\n * @property {HTMLFieldSetElement} node\n */\nexport default class Fieldset extends FormControl {\n    /**\n     * Get the form input element with given name.\n     * \n     * @param {string} name \n     * @returns \n     */\n    input(name) {\n        const\n            attribute = 'data-cipher-input',\n            items = this.inputs(name)\n\n        items.forEach(item => item.setAttribute(attribute, name))\n\n        return this.form.querySelector(`[${attribute}='${name}']`)\n    }\n\n    /**\n     * Get all the form control elements with the given name.\n     * \n     * @param {string} name \n     * @returns {HTMLElement[]}\n     */\n    inputs(name) {\n        const\n            item = this.form.elements.namedItem(name),\n            items = typeof item[Symbol.iterator] === 'function'\n                ? [...item]\n                : [item]\n\n        return items.filter(item => !this.node.contains(item))\n    }\n\n    /**\n     * Append to fieldset 'output' field of given \"name\" and \"value\".\n     * \n     * @param {string} name \n     * @param {string} value \n     * @param {boolean} overwrite\n     * @returns \n     */\n    output(name, value, overwrite = true) {\n        const output = this.node.elements.namedItem(name) ?? document.createElement('input')\n\n        output.type = 'hidden'\n        output.name = name\n        output.value = value\n\n        if (!this.node.contains(output)) {\n            this.node.appendChild(output)\n        }\n\n        if (overwrite) {\n            this.inputs(name).forEach(item => item.removeAttribute('name'))\n        }\n\n        return output\n    }\n}","import Fieldset from \"./Fieldset.mjs\";\n\nexport default class Encrypt extends Fieldset {\n    constructor(node, { input, key }) {\n        super(node)\n\n        this.input = input\n\n        this.publicKey = key\n\n        this.onSubmit(this.encrypt)\n    }\n\n    encrypt() {\n        // \n    }\n}","import Fieldset from \"./Fieldset.mjs\";\nimport Password from \"../Password.mjs\";\n\nimport base16 from \"../Util/base16.mjs\";\n\nexport default class Login extends Fieldset {\n    constructor(node, { password }) {\n        super(node)\n\n        this.password = password\n\n        this.onSubmit(this.login)\n    }\n\n    async login() {\n        const\n            plaintextPassword = this.input(this.password).value,\n            password = await Password.hash(plaintextPassword).remember()\n\n        this.output(this.password, base16.encode(await password.hash))\n    }\n}","import Cipher from \"../Cipher.mjs\";\nimport Fieldset from \"./Fieldset.mjs\";\nimport Password from \"../Password.mjs\";\n\nimport base16 from \"../Util/base16.mjs\";\n\nexport default class Register extends Fieldset {\n    constructor(node, { password, confirmation }) {\n        super(node)\n\n        this.password = password\n        this.confirmation = confirmation\n\n        this.onSubmit(this.register)\n    }\n\n    async register() {\n        const\n            plaintextPassword = this.input(this.password).value,\n            password = await Password.hash(plaintextPassword).remember()\n\n        this.output(this.password, base16.encode(await password.hash))\n\n        if (this.confirmation) {\n            const\n                passwordConfirmed = this.input(this.confirmation).value,\n                confirmationHash = Password.hash(passwordConfirmed).hash\n\n            this.output(\n                this.confirmation,\n                base16.encode(await confirmationHash)\n            )\n        }\n\n        const\n            cipher = await Cipher.generate(),\n            exported = await cipher.export(password),\n            json = JSON.stringify(exported)\n\n        this.output('_cipher', json)\n    }\n}","import Component from \"./Components/Component.mjs\"\nimport Decrypt from \"./Components/Decrypt.mjs\"\nimport Encrypt from \"./Components/Encrypt.mjs\"\nimport Login from \"./Components/Login.mjs\"\nimport Register from \"./Components/Register.mjs\"\n\n/**\n * Class responsible for mapping and loading the cipher components.\n */\nexport default class Components {\n    /**\n     * @type {Object.<string, typeof Component>}\n     */\n    static types = {\n        decrypt: Decrypt,\n        encrypt: Encrypt,\n        login: Login,\n        register: Register,\n    }\n\n    /**\n     * Load components on the page.\n     */\n    static load() {\n        document.querySelectorAll('[data-cipher-component]').forEach(node => {\n            const\n                name = node.dataset.cipherComponent,\n                type = this.types[name],\n                attributes = JSON.parse(node.dataset.cipherAttributes),\n                component = new type(node, attributes)\n\n            return component\n        })\n    }\n}","import Components from \"./Components.mjs\";\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    Components.load()\n})"],"names":["Component","constructor","node","_context","this","Script","static","document","currentScript","script","getAttribute","base16","data","Array","from","Uint8Array","map","b","toString","padStart","join","string","match","h","parseInt","buffer","Password","hash","salt","storage","token","clientHash","serverHash","plaintext","input","sha256","value","TextEncoder","encode","crypto","subtle","digest","stored","localStorage","getItem","decode","async","setItem","wrappedKey","unwrappedKeyAlgorithm","name","unwrappingKey","wrappingKey","unwrapKey","iv","key","wrapKey","baseKey","importKey","deriveKey","iterations","length","Cipher","privateKey","publicKey","password","recall","wrappedPrivateKey","wrap","exportedPublicKey","exportKey","k","p","s","keyPair","Promise","all","getRandomValues","generateKey","modulusLength","publicExponent","unwrap","Decrypt","cipher","super","decrypt","Event","event","on","target","targets","WeakMap","has","set","callbacks","listen","get","then","callback","push","finally","final","type","addEventListener","preventDefault","promises","dispatchEvent","CustomEvent","bubbles","detail","FormControl","form","onSubmit","Error","toLowerCase","intercept","bind","submit","Fieldset","attribute","inputs","forEach","item","setAttribute","querySelector","elements","namedItem","Symbol","iterator","filter","contains","output","overwrite","createElement","appendChild","removeAttribute","Encrypt","encrypt","Login","login","plaintextPassword","remember","Register","confirmation","register","passwordConfirmed","confirmationHash","generate","exported","export","json","JSON","stringify","Components","querySelectorAll","dataset","cipherComponent","types","parse","cipherAttributes","component","load"],"mappings":"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"}