!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";class t{constructor(t,e){this.node=t}}class e{static#t=document.currentScript;static data=this.#t.getAttribute("data");static element=this.#t.getAttribute("element");static event=this.#t.getAttribute("event");static salt=this.#t.getAttribute("salt");static storage=this.#t.getAttribute("storage")}class s{static event=e.event;static targets={};static intercept(t){return new class{on(e){const a=s.targets[t]??=new WeakMap;return a.has(e)||(a.set(e,{callbacks:[]}),s.#e(t,e)),this.target=a.get(e),this}then(t){return this.target.callbacks.push(t),this}finally(t){this.target.final=t}}}static#e(t,e){e.addEventListener(t,(async s=>{s.preventDefault();const a=this.targets[t].get(e).callbacks.map((t=>t()));await Promise.all(a),e.dispatchEvent(new CustomEvent(this.event,{bubbles:!0,detail:{type:t}}))})),document.addEventListener(this.event,(s=>{s.target==e&&s.detail.type==t&&this.targets[t].get(e).final(s)}))}}class a extends t{get form(){return this.node.closest("form")}onSubmit(t){if(!this.form)throw new Error(`Keypad component "${this.constructor.name.toLowerCase()}" must be inside <form> element to intercept submit.`);s.intercept("submit").on(this.form).then(t.bind(this)).finally((()=>this.form.submit()))}}class r extends a{input(t){const e="data-keypad-input";return this.#s(t).forEach((s=>s.setAttribute(e,t))),this.form.querySelector(`[${e}='${t}']`)}#s(t){const e=this.form.elements.namedItem(t);return("function"==typeof e[Symbol.iterator]?[...e]:[e]).filter((t=>!this.node.contains(t)))}output(t,e,s=!0){const a=this.node.querySelector(`[name=${t}]`)??document.createElement("input");return a.type="hidden",a.name=t,a.value=e,this.node.contains(a)||this.node.appendChild(a),s&&this.#s(t).forEach((t=>t.removeAttribute("name"))),a}}class n{static encode(t){return Array.from(new Uint8Array(t)).map((t=>t.toString(16).padStart(2,"0"))).join("")}static decode(t){return new Uint8Array(t.match(/../g).map((t=>parseInt(t,16)))).buffer}}function i(t){return(new TextEncoder).encode(t)}class c{#a;hash;static salt=e.salt;static storage=e.storage;static token=e.token;constructor({clientHash:t,serverHash:e=null}){this.#a=t,this.hash=e}static hash(t){const e=this.salt,s=t=>{return e=i(t),crypto.subtle.digest("SHA-256",e);var e};return new this({clientHash:s(t+e),serverHash:s(e+t)})}static recall(){const t=this.retrieve();return new this({clientHash:n.decode(t.pop())})}async remember({append:t=!1}={}){const e=c.storage,s=t?c.retrieve():[],a=n.encode(await this.#a),r=s.filter((t=>t!=a)).concat(a);return localStorage.setItem(e,r),this}async restore(){const t=n.encode(await this.#a),e=c.retrieve(),s=e.indexOf(t);return!(s<1)&&(this.#a=n.decode(e[s-1]),!0)}static retrieve(){const t=localStorage.getItem(this.storage);return t?t.split(","):[]}async unwrap(t,e,s={name:"RSA-OAEP",hash:"SHA-256"}){try{const a=await this.#r(e);return await crypto.subtle.unwrapKey("pkcs8",t,a,{name:"AES-GCM",iv:e},s,!0,["decrypt"])}catch(a){if(await this.restore())return await this.unwrap(t,e,s);throw a}}async wrap(t,e){const s=await this.#r(e);return await crypto.subtle.wrapKey("pkcs8",t,s,{name:"AES-GCM",iv:e})}async#r(t){const e=await crypto.subtle.importKey("raw",await this.#a,"PBKDF2",!1,["deriveBits","deriveKey"]);return await crypto.subtle.deriveKey({salt:t,name:"PBKDF2",iterations:1e5,hash:"SHA-256"},e,{name:"AES-GCM",length:256},!0,["encrypt","decrypt","wrapKey","unwrapKey"])}}class o{constructor({privateKey:t,publicKey:e}){this.privateKey=t,this.publicKey=e}async export(t=null){t??=c.recall();const e=crypto.getRandomValues(new Uint8Array(16)),s=t.wrap(this.privateKey,e),a=crypto.subtle.exportKey("spki",this.publicKey);return{k:n.encode(await s),p:n.encode(await a),s:n.encode(e)}}static async generate(){const t=await crypto.subtle.generateKey({name:"RSA-OAEP",modulusLength:4096,publicExponent:new Uint8Array([1,0,1]),hash:"SHA-256"},!0,["encrypt","decrypt","wrapKey","unwrapKey"]);return new this({privateKey:t.privateKey,publicKey:t.publicKey})}static async import({k:t,p:e,s:s},a=null){a??=c.recall();const r=n.decode(s),i=n.decode(e),o=n.decode(t),[h,p]=await Promise.all([a.unwrap(o,r),crypto.subtle.importKey("spki",i,{name:"RSA-OAEP",hash:"SHA-256"},!0,["encrypt","wrapKey"])]);return new this({privateKey:h,publicKey:p})}static resolve(){const t=e.data;return t?this.import(JSON.parse(t)):null}}class h extends r{constructor(t,{password:e}){super(t),this.password=e,this.onSubmit(this.changePassword)}async changePassword(){const t=await o.resolve(),e=this.input(this.password).value,s=await c.hash(e).remember({append:!0}),a=await t.export(s),r=JSON.stringify(a);this.output("_keypad",r)}}class p extends t{constructor(t){super(t),this.decrypt()}async decrypt(){const t=(await o.resolve()).privateKey,e=n.decode(this.node.innerText),s=await crypto.subtle.decrypt({name:"RSA-OAEP"},t,e);var a;this.node.innerText=(a=s,(new TextDecoder).decode(a)),this.node.hidden=!1}}class u extends r{constructor(t,{target:e,key:s}){super(t),this.target=e,this.publicKey=s,this.onSubmit(this.encrypt)}async encrypt(){const t=this.input(this.target).value,e=await crypto.subtle.importKey("spki",n.decode(this.publicKey),{name:"RSA-OAEP",hash:"SHA-256"},!0,["encrypt"]),s=await crypto.subtle.encrypt({name:"RSA-OAEP"},e,i(t));this.output(this.target,n.encode(s))}}class l extends r{constructor(t,{target:e}){super(t),this.target=e,this.onSubmit(this.hash)}async hash(){const t=this.input(this.target).value,e=c.hash(t);this.output(this.target,n.encode(await e.hash))}}class d extends r{constructor(t,{password:e}){super(t),this.password=e,this.onSubmit(this.login)}async login(){const t=this.input(this.password).value;await c.hash(t).remember()}}class y extends r{constructor(t,{password:e}){super(t),this.password=e,this.onSubmit(this.register)}async register(){const t=this.input(this.password).value,e=await c.hash(t).remember(),s=await o.generate(),a=await s.export(e),r=JSON.stringify(a);this.output("_keypad",r)}}class m{static types={"change-password":h,decrypt:p,encrypt:u,hash:l,login:d,register:y};static load(){customElements.define(`${e.element}-element`,class extends HTMLElement{constructor(){return self=super()}connectedCallback(){const t=self,e=t.dataset.keypadComponent;return new(0,m.types[e])(t,JSON.parse(t.dataset.keypadAttributes))}})}}document.addEventListener("DOMContentLoaded",(()=>{m.load()}))}));
//# sourceMappingURL=keypad.js.map
